// Code generated by protoc-gen-go. DO NOT EDIT.
// source: neo4bacon.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	neo4bacon.proto

It has these top-level messages:
	Empty
	RestaurantList
	Restaurant
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RestaurantList struct {
	Restaurants []*Restaurant `protobuf:"bytes,1,rep,name=restaurants" json:"restaurants,omitempty"`
}

func (m *RestaurantList) Reset()                    { *m = RestaurantList{} }
func (m *RestaurantList) String() string            { return proto.CompactTextString(m) }
func (*RestaurantList) ProtoMessage()               {}
func (*RestaurantList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RestaurantList) GetRestaurants() []*Restaurant {
	if m != nil {
		return m.Restaurants
	}
	return nil
}

type Restaurant struct {
	ID      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Lastpos int32  `protobuf:"varint,3,opt,name=lastpos" json:"lastpos,omitempty"`
	Newpos  int32  `protobuf:"varint,4,opt,name=newpos" json:"newpos,omitempty"`
	Change  string `protobuf:"bytes,5,opt,name=change" json:"change,omitempty"`
}

func (m *Restaurant) Reset()                    { *m = Restaurant{} }
func (m *Restaurant) String() string            { return proto.CompactTextString(m) }
func (*Restaurant) ProtoMessage()               {}
func (*Restaurant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Restaurant) GetId() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Restaurant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Restaurant) GetLastpos() int32 {
	if m != nil {
		return m.Lastpos
	}
	return 0
}

func (m *Restaurant) GetNewpos() int32 {
	if m != nil {
		return m.Newpos
	}
	return 0
}

func (m *Restaurant) GetChange() string {
	if m != nil {
		return m.Change
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*RestaurantList)(nil), "api.RestaurantList")
	proto.RegisterType((*Restaurant)(nil), "api.Restaurant")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Neo4Bacon service

type Neo4BaconClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestaurantList, error)
}

type neo4BaconClient struct {
	cc *grpc.ClientConn
}

func NewNeo4BaconClient(cc *grpc.ClientConn) Neo4BaconClient {
	return &neo4BaconClient{cc}
}

func (c *neo4BaconClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestaurantList, error) {
	out := new(RestaurantList)
	err := grpc.Invoke(ctx, "/api.Neo4bacon/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Neo4Bacon service

type Neo4BaconServer interface {
	List(context.Context, *Empty) (*RestaurantList, error)
}

func RegisterNeo4BaconServer(s *grpc.Server, srv Neo4BaconServer) {
	s.RegisterService(&_Neo4Bacon_serviceDesc, srv)
}

func _Neo4Bacon_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Neo4BaconServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Neo4bacon/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Neo4BaconServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Neo4Bacon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Neo4bacon",
	HandlerType: (*Neo4BaconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Neo4Bacon_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neo4bacon.proto",
}

func init() { proto.RegisterFile("neo4bacon.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x10, 0xc7, 0x4d, 0x3f, 0x76, 0xd9, 0x59, 0xd8, 0x85, 0x11, 0x24, 0x78, 0x2a, 0x39, 0xd5, 0x4b,
	0xc1, 0x2a, 0xbe, 0x80, 0x78, 0x13, 0x0f, 0x79, 0x83, 0x69, 0x1b, 0x34, 0x60, 0x93, 0xd0, 0x44,
	0x44, 0x9f, 0x5e, 0x3a, 0xb4, 0x56, 0xbc, 0xe5, 0xff, 0x41, 0xf8, 0xff, 0x06, 0xce, 0xce, 0xf8,
	0xfb, 0x8e, 0x7a, 0xef, 0x9a, 0x30, 0xf9, 0xe4, 0x31, 0xa7, 0x60, 0xd5, 0x1e, 0xca, 0xa7, 0x31,
	0xa4, 0x2f, 0xf5, 0x08, 0x27, 0x6d, 0x62, 0xa2, 0x8f, 0x89, 0x5c, 0x7a, 0xb6, 0x31, 0xe1, 0x2d,
	0x1c, 0xa7, 0x5f, 0x27, 0x4a, 0x51, 0xe5, 0xf5, 0xb1, 0x3d, 0x37, 0x14, 0x6c, 0xb3, 0x35, 0xf5,
	0xdf, 0x8e, 0xfa, 0x06, 0xd8, 0x22, 0x3c, 0x41, 0x66, 0x07, 0x29, 0x2a, 0x51, 0x1f, 0x74, 0x66,
	0x07, 0x44, 0x28, 0x1c, 0x8d, 0x46, 0x66, 0xec, 0xf0, 0x1b, 0x25, 0xec, 0xdf, 0x29, 0xa6, 0xe0,
	0xa3, 0xcc, 0x2b, 0x51, 0x97, 0x7a, 0x95, 0x78, 0x05, 0x3b, 0x67, 0x3e, 0xe7, 0xa0, 0xe0, 0x60,
	0x51, 0xb3, 0xdf, 0xbf, 0x91, 0x7b, 0x35, 0xb2, 0xe4, 0x7f, 0x16, 0xd5, 0x3e, 0xc0, 0xe1, 0x65,
	0x25, 0xc4, 0x1b, 0x28, 0x98, 0x01, 0x78, 0x2e, 0x13, 0x5e, 0x5f, 0xfe, 0x9b, 0x3e, 0x17, 0xd4,
	0x45, 0xb7, 0xe3, 0x6b, 0xdc, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x59, 0x6d, 0xbb, 0x71, 0x20,
	0x01, 0x00, 0x00,
}
